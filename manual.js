// manual.js - –î–û–ë–ê–í–õ–Ø–ï–ú –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–†–¢–û–ß–ï–ö

class MemoryApp {
    constructor() {
        this.cards = this.loadCards();
        this.currentCardIndex = 0;
        this.isAnswerShown = false;
        this.currentInterface = 'mainInterface';
        this.editingCardId = null; // –ù–û–í–û–ï: ID –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.deletingCardId = null; // –ù–û–í–û–ï: ID –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    }

    // –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø

    // –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    showEditModal(cardId) {
        const card = this.cards.find(c => c.id === cardId);
        if (!card) return;
        
        this.editingCardId = cardId;
        
        document.getElementById('editTheme').value = card.theme || '';
        document.getElementById('editQuestion').value = card.question || '';
        document.getElementById('editAnswer').value = card.answer || '';
        
        document.getElementById('editModal').style.display = 'flex';
    }

    // –°–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    hideEditModal() {
        document.getElementById('editModal').style.display = 'none';
        this.editingCardId = null;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    saveEditedCard() {
        if (!this.editingCardId) return;
        
        const card = this.cards.find(c => c.id === this.editingCardId);
        if (!card) return;
        
        const newTheme = document.getElementById('editTheme').value.trim();
        const newQuestion = document.getElementById('editQuestion').value.trim();
        const newAnswer = document.getElementById('editAnswer').value.trim();
        
        if (!newQuestion || !newAnswer) {
            alert('–í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        card.theme = newTheme;
        card.question = newQuestion;
        card.answer = newAnswer;
        
        this.saveCards();
        this.hideEditModal();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        if (this.currentInterface === 'catalogInterface') {
            this.showCatalog();
        }
        
        alert('–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! ‚úÖ');
    }

    // –ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    showDeleteModal(cardId) {
        this.deletingCardId = cardId;
        document.getElementById('deleteModal').style.display = 'flex';
    }

    // –°–∫—Ä—ã—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    hideDeleteModal() {
        document.getElementById('deleteModal').style.display = 'none';
        this.deletingCardId = null;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    confirmDeleteCard() {
        if (!this.deletingCardId) return;
        
        this.cards = this.cards.filter(c => c.id !== this.deletingCardId);
        this.saveCards();
        this.hideDeleteModal();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (this.currentInterface === 'catalogInterface') {
            this.showCatalog();
        }
        
        alert('–ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞! ‚úÖ');
    }

    // –û–ë–ù–û–í–õ–Ø–ï–ú –ú–ï–¢–û–î showCatalog –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ö–ù–û–ü–û–ö
    showCatalog() {
        if (this.cards.length === 0) {
            alert('–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏.');
            this.showInterface('mainInterface');
            return;
        }
        
        const groupedByTheme = this.groupCardsByTheme();
        let catalogHTML = '';
        
        Object.entries(groupedByTheme).forEach(([theme, themeCards]) => {
            catalogHTML += `
                <div class="theme-group">
                    <div class="theme-header" onclick="memoryApp.toggleTheme('${theme}')">
                        <div class="theme-title">${theme}</div>
                        <div class="theme-count">${themeCards.length}</div>
                    </div>
                    <div class="theme-cards" id="theme-${this.encodeThemeId(theme)}">
                        ${themeCards.map(card => `
                            <div class="catalog-card">
                                <div style="font-weight: bold; margin-bottom: 8px;">${card.question}</div>
                                <div style="color: #666; font-size: 14px; margin-bottom: 10px;">${card.answer.substring(0, 100)}${card.answer.length > 100 ? '...' : ''}</div>
                                
                                <!-- –ù–û–í–û–ï: –ö–ù–û–ü–ö–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ò –£–î–ê–õ–ï–ù–ò–Ø -->
                                <div class="card-actions">
                                    <button class="edit-btn" onclick="memoryApp.showEditModal('${card.id}')">
                                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                    </button>
                                    <button class="delete-btn" onclick="memoryApp.showDeleteModal('${card.id}')">
                                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                                    </button>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        });
        
        document.getElementById('catalogList').innerHTML = catalogHTML;
        this.showInterface('catalogInterface');
    }

    // –û–ë–ù–û–í–õ–Ø–ï–ú –ú–ï–¢–û–î displayGeneratedCards –î–õ–Ø –ö–ù–û–ü–û–ö –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø
    displayGeneratedCards() {
        const cardsList = document.getElementById('cardsList');
        const cardsContainer = document.getElementById('cardsContainer');
        
        if (!cardsList || !cardsContainer) return;
        
        cardsList.innerHTML = '';
        
        const recentCards = this.cards.slice(-10);
        
        recentCards.forEach((card) => {
            const cardElement = document.createElement('div');
            cardElement.className = 'card';
            cardElement.innerHTML = `
                ${card.theme ? `<div class="card-theme">${card.theme}</div>` : ''}
                <div class="card-question">${card.question}</div>
                <div class="card-answer">${card.answer}</div>
                
                <!-- –ù–û–í–û–ï: –ö–ù–û–ü–ö–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ò –£–î–ê–õ–ï–ù–ò–Ø -->
                <div class="card-actions">
                    <button class="edit-btn" onclick="memoryApp.showEditModal('${card.id}')">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="delete-btn" onclick="memoryApp.showDeleteModal('${card.id}')">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            `;
            cardsList.appendChild(cardElement);
        });
        
        this.showInterface('cardsContainer');
    }

    // –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
    // ... (generateCards, startReview, showCard –∏ —Ç.–¥.)
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
let memoryApp;

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    memoryApp = new MemoryApp();
    memoryApp.init();
});
