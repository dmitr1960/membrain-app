// manual.js - –£–ú–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–û –°–ú–´–°–õ–û–í–´–ú –ë–õ–û–ö–ê–ú –° AI-–û–¢–í–ï–¢–ê–ú–ò

class MemoryCard {
    constructor(question, answer, theme = '', subject = '') {
        this.question = question;
        this.answer = answer;
        this.theme = theme;
        this.subject = subject;
        this.id = Date.now() + '_' + Math.floor(Math.random() * 1000000);
        this.lastReviewed = null;
        this.confidence = 3;
        this.createdAt = new Date().toISOString();
    }

    getNextReviewDate() {
        const intervals = {
            2: 1,    // –°–ª–æ–∂–Ω–æ - —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å
            3: 3,    // –ù–æ—Ä–º–∞–ª—å–Ω–æ - —á–µ—Ä–µ–∑ 3 –¥–Ω—è  
            4: 7     // –õ–µ–≥–∫–æ - —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π
        };
        
        const nextDate = new Date();
        nextDate.setDate(nextDate.getDate() + intervals[this.confidence]);
        return nextDate;
    }
}

class MemoryApp {
    constructor() {
        this.cards = this.loadCards();
        this.currentCardIndex = 0;
        this.isAnswerShown = false;
        this.currentInterface = 'mainInterface';
        this.editingCardId = null;
        this.deletingCardId = null;
        this.deletingThemeName = null;
        this.deletingSubjectName = null;
        this.reviewCards = [];
        
        console.log('App initialized with cards:', this.cards.length);
    }

    init() {
        this.bindEvents();
        this.showMainInterface();
        this.setupPasteHandler();
        this.setupBackButton();
        this.setupModalHandlers();
        this.setupEventDelegation();
    }

    // –î–ï–õ–ï–ì–ò–†–û–í–ê–ù–ò–ï –°–û–ë–´–¢–ò–ô
    setupEventDelegation() {
        document.addEventListener('click', (e) => {
            const target = e.target;
            
            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            if (target.classList.contains('edit-btn')) {
                const cardId = target.getAttribute('data-card-id');
                console.log('Edit clicked, cardId:', cardId);
                if (cardId) {
                    this.showEditModal(cardId);
                }
                e.stopPropagation();
            }
            
            // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            if (target.classList.contains('delete-btn')) {
                const cardId = target.getAttribute('data-card-id');
                console.log('Delete clicked, cardId:', cardId);
                if (cardId) {
                    this.showDeleteModal(cardId);
                }
                e.stopPropagation();
            }
            
            // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–º—ã
            if (target.classList.contains('delete-theme-btn')) {
                const themeName = target.getAttribute('data-theme-name');
                const subjectName = target.getAttribute('data-subject-name');
                if (themeName && subjectName) {
                    this.showDeleteThemeModal(themeName, subjectName);
                }
                e.stopPropagation();
            }
            
            // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
            if (target.classList.contains('delete-subject-btn')) {
                const subjectName = target.getAttribute('data-subject-name');
                if (subjectName) {
                    this.showDeleteSubjectModal(subjectName);
                }
                e.stopPropagation();
            }
        });
    }

    bindEvents() {
        const elements = {
            generateBtn: document.getElementById('generateBtn'),
            askAiBtn: document.getElementById('askAiBtn'),
            startReviewBtn: document.getElementById('startReviewBtn'),
            showAnswerBtn: document.getElementById('showAnswerBtn'),
            hardBtn: document.getElementById('hardBtn'),
            goodBtn: document.getElementById('goodBtn'),
            easyBtn: document.getElementById('easyBtn')
        };
        
        if (elements.generateBtn) {
            elements.generateBtn.addEventListener('click', () => this.generateCards());
        }
        
        if (elements.askAiBtn) {
            elements.askAiBtn.addEventListener('click', () => this.askAI());
        }
        
        if (elements.startReviewBtn) {
            elements.startReviewBtn.addEventListener('click', () => this.startReview());
        }
        
        if (elements.showAnswerBtn) {
            elements.showAnswerBtn.addEventListener('click', () => this.showAnswer());
        }
        
        if (elements.hardBtn) {
            elements.hardBtn.addEventListener('click', () => this.rateCard(2));
        }
        
        if (elements.goodBtn) {
            elements.goodBtn.addEventListener('click', () => this.rateCard(3));
        }
        
        if (elements.easyBtn) {
            elements.easyBtn.addEventListener('click', () => this.rateCard(4));
        }

        // Enter –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ AI
        const questionInput = document.getElementById('questionInput');
        if (questionInput) {
            questionInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.askAI();
                }
            });
        }
    }

    setupPasteHandler() {
        const textInput = document.getElementById('textInput');
        if (textInput) {
            textInput.addEventListener('paste', (e) => {
                setTimeout(() => {
                    this.autoDetectTheme();
                }, 10);
            });
        }
    }

    setupBackButton() {
        const backBtn = document.querySelector('.back-btn');
        if (backBtn) {
            backBtn.addEventListener('click', () => this.goBack());
        }
    }

    setupModalHandlers() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
        document.addEventListener('click', (e) => {
            if (e.target.id === 'editModal') {
                this.hideEditModal();
            }
            if (e.target.id === 'deleteModal') {
                this.hideDeleteModal();
            }
            if (e.target.id === 'deleteThemeModal') {
                this.hideDeleteThemeModal();
            }
            if (e.target.id === 'deleteSubjectModal') {
                this.hideDeleteSubjectModal();
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.hideEditModal();
                this.hideDeleteModal();
                this.hideDeleteThemeModal();
                this.hideDeleteSubjectModal();
            }
        });
    }

    goBack() {
        switch(this.currentInterface) {
            case 'cardsContainer':
            case 'catalogInterface':
            case 'reviewInterface':
                this.showMainInterface();
                break;
            default:
                this.showMainInterface();
        }
    }

    // –ù–û–í–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ: AI-–û–¢–í–ï–¢–´ –ù–ê –í–û–ü–†–û–°–´
    async askAI() {
        const questionInput = document.getElementById('questionInput');
        const textInput = document.getElementById('textInput');
        const askAiBtn = document.getElementById('askAiBtn');
        
        if (!questionInput || !textInput) return;
        
        const question = questionInput.value.trim();
        if (!question) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è AI', 'error');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        askAiBtn.innerHTML = '<div class="loading"></div> –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç...';
        askAiBtn.disabled = true;
        
        try {
            // –ò–º–∏—Ç–∞—Ü–∏—è AI-–æ—Ç–≤–µ—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤)
            const aiResponse = await this.generateAIResponse(question);
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
            textInput.value = aiResponse;
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É
            this.autoDetectThemeFromQuestion(question);
            
            this.showNotification('AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏', 'success');
            
        } catch (error) {
            console.error('AI error:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞', 'error');
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            askAiBtn.innerHTML = 'ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å AI';
            askAiBtn.disabled = false;
        }
    }

    async generateAIResponse(question) {
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π AI (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –∫ API)
        const knowledgeBase = {
            '—á—Ç–æ —Ç–∞–∫–æ–µ —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑': `–§–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑ ‚Äî —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ —Å–≤–µ—Ç–∞ –≤ —Ö–∏–º–∏—á–µ—Å–∫—É—é —ç–Ω–µ—Ä–≥–∏—é, –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏–π –≤ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö, –≤–æ–¥–æ—Ä–æ—Å–ª—è—Ö –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–∫—Ç–µ—Ä–∏—è—Ö.

–û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑–∞:
1. –°–≤–µ—Ç–æ–≤—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ - –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ —Å–≤–µ—Ç–∞ —Ö–ª–æ—Ä–æ—Ñ–∏–ª–ª–æ–º
2. –¢–µ–º–Ω–æ–≤—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ (—Ü–∏–∫–ª –ö–∞–ª—å–≤–∏–Ω–∞) - —Ñ–∏–∫—Å–∞—Ü–∏—è —É–≥–ª–µ–∫–∏—Å–ª–æ–≥–æ –≥–∞–∑–∞

–£—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑–∞: 6CO‚ÇÇ + 6H‚ÇÇO + —Å–≤–µ—Ç ‚Üí C‚ÇÜH‚ÇÅ‚ÇÇO‚ÇÜ + 6O‚ÇÇ

–ó–Ω–∞—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑–∞:
‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∫–∏—Å–ª–æ—Ä–æ–¥–∞
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –≤–µ—â–µ—Å—Ç–≤
‚Ä¢ –û—Å–Ω–æ–≤–∞ –ø–∏—â–µ–≤—ã—Ö —Ü–µ–ø–µ–π`,

            '—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏': `–ö–ª–µ—Ç–∫–∞ ‚Äî –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∂–∏–≤—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤.

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–ª–µ—Ç–∫–∏:

1. –Ø–¥—Ä–æ - —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª (–î–ù–ö)
2. –¶–∏—Ç–æ–ø–ª–∞–∑–º–∞ - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Ä–µ–¥–∞ –∫–ª–µ—Ç–∫–∏
3. –ú–µ–º–±—Ä–∞–Ω–∞ - —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –æ–±–º–µ–Ω –≤–µ—â–µ—Å—Ç–≤
4. –ú–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–∏ - —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
5. –†–∏–±–æ—Å–æ–º—ã - —Å–∏–Ω—Ç–µ–∑ –±–µ–ª–∫–∞
6. –≠–Ω–¥–æ–ø–ª–∞–∑–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–µ—Ç—å - —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤–µ—â–µ—Å—Ç–≤

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫:
‚Ä¢ –•–ª–æ—Ä–æ–ø–ª–∞—Å—Ç—ã –¥–ª—è —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑–∞
‚Ä¢ –ö–ª–µ—Ç–æ—á–Ω–∞—è —Å—Ç–µ–Ω–∫–∞ –∏–∑ —Ü–µ–ª–ª—é–ª–æ–∑—ã
‚Ä¢ –ö—Ä—É–ø–Ω—ã–µ –≤–∞–∫—É–æ–ª–∏`,

            '–æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–æ–π–Ω–∞ 1812 –≥–æ–¥–∞': `–û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–æ–π–Ω–∞ 1812 –≥–æ–¥–∞ ‚Äî –≤–æ–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É –†–æ—Å—Å–∏–π—Å–∫–æ–π –∏–º–ø–µ—Ä–∏–µ–π –∏ –Ω–∞–ø–æ–ª–µ–æ–Ω–æ–≤—Å–∫–æ–π –§—Ä–∞–Ω—Ü–∏–µ–π.

–û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:
‚Ä¢ 12 –∏—é–Ω—è 1812 - –≤—Ç–æ—Ä–∂–µ–Ω–∏–µ –ù–∞–ø–æ–ª–µ–æ–Ω–∞
‚Ä¢ –ë–æ—Ä–æ–¥–∏–Ω—Å–∫–æ–µ —Å—Ä–∞–∂–µ–Ω–∏–µ (26 –∞–≤–≥—É—Å—Ç–∞)
‚Ä¢ –°–¥–∞—á–∞ –ú–æ—Å–∫–≤—ã
‚Ä¢ –û—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–π –∞—Ä–º–∏–∏
‚Ä¢ 14 –¥–µ–∫–∞–±—Ä—è - –∏–∑–≥–Ω–∞–Ω–∏–µ –≤—Ä–∞–≥–∞ –∏–∑ –†–æ—Å—Å–∏–∏

–ì–ª–∞–≤–Ω—ã–µ –≥–µ—Ä–æ–∏:
‚Ä¢ –ú–∏—Ö–∞–∏–ª –ö—É—Ç—É–∑–æ–≤
‚Ä¢ –ü–µ—Ç—Ä –ë–∞–≥—Ä–∞—Ç–∏–æ–Ω  
‚Ä¢ –ú–∏—Ö–∞–∏–ª –ë–∞—Ä–∫–ª–∞–π-–¥–µ-–¢–æ–ª–ª–∏
‚Ä¢ –î–µ–Ω–∏—Å –î–∞–≤—ã–¥–æ–≤

–ò—Ç–æ–≥–∏:
‚Ä¢ –†–∞–∑–≥—Ä–æ–º –í–µ–ª–∏–∫–æ–π –∞—Ä–º–∏–∏ –ù–∞–ø–æ–ª–µ–æ–Ω–∞
‚Ä¢ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –ø–æ—Ö–æ–¥–æ–≤ —Ä—É—Å—Å–∫–æ–π –∞—Ä–º–∏–∏
‚Ä¢ –†–æ—Å—Ç –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è –≤ –†–æ—Å—Å–∏–∏`
        };
        
        const lowerQuestion = question.toLowerCase();
        
        // –ü–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        for (const [key, answer] of Object.entries(knowledgeBase)) {
            if (lowerQuestion.includes(key)) {
                return answer;
            }
        }
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
        return `–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: "${question}"

–≠—Ç–æ —Å–ª–æ–∂–Ω—ã–π –∏ –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã:

1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è
2. –ö–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ 
3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
4. –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≤–∏—Ç–∏—è
5. –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã

–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏ —É—á–µ–±–Ω–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ.`;
    }

    autoDetectThemeFromQuestion(question) {
        const themeInput = document.getElementById('themeInput');
        if (!themeInput || themeInput.value.trim()) return;
        
        const detectedTheme = this.findMainTopic(question);
        if (detectedTheme && detectedTheme !== '–æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–Ω—è—Ç–∏–µ') {
            themeInput.value = detectedTheme;
        }
    }

    autoDetectTheme() {
        const textInput = document.getElementById('textInput');
        const themeInput = document.getElementById('themeInput');
        
        if (!textInput || !themeInput) return;
        
        const text = textInput.value.trim();
        if (!text) return;
        
        if (!themeInput.value.trim()) {
            const detectedTheme = this.findMainTopic(text);
            if (detectedTheme && detectedTheme !== '–æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–Ω—è—Ç–∏–µ') {
                themeInput.value = detectedTheme;
            }
        }
    }

    generateCards() {
        const textInput = document.getElementById('textInput');
        const themeInput = document.getElementById('themeInput');
        const subjectInput = document.getElementById('subjectInput');
        
        if (!textInput) return;
        
        const text = textInput.value.trim();
        let theme = themeInput ? themeInput.value.trim() : '';
        let subject = subjectInput ? subjectInput.value.trim() : '';
        
        if (!text) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫', 'error');
            return;
        }
        
        if (!subject) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞', 'error');
            return;
        }
        
        if (!theme) {
            theme = this.findMainTopic(text);
            if (themeInput) themeInput.value = theme;
        }
        
        const newCards = this.intelligentCardGeneration(text, theme, subject);
        
        this.cards = [...this.cards, ...newCards];
        this.saveCards();
        this.displayGeneratedCards();
        
        this.showNotification(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${newCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —Ç–µ–º–µ "${theme}"! –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${this.cards.length}`, 'success');
    }

    intelligentCardGeneration(text, theme, subject) {
        const newCards = [];
        
        // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–º—ã—Å–ª–æ–≤—ã–µ –±–ª–æ–∫–∏
        const meaningBlocks = this.extractMeaningBlocks(text);
        
        console.log('–ù–∞–π–¥–µ–Ω—ã —Å–º—ã—Å–ª–æ–≤—ã–µ –±–ª–æ–∫–∏:', meaningBlocks);
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–º—ã—Å–ª–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
        meaningBlocks.forEach((block, index) => {
            const question = this.generateSmartQuestion(block, theme, index, meaningBlocks.length);
            const answer = block.content;
            
            if (answer.length > 20) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞
                newCards.push(new MemoryCard(question, answer, theme, subject));
            }
        });
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å —Å–º—ã—Å–ª–æ–≤—ã–µ –±–ª–æ–∫–∏, —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –æ–±—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        if (newCards.length === 0 && text.length > 50) {
            newCards.push(new MemoryCard(
                `–ß—Ç–æ —Ç–∞–∫–æ–µ ${theme}?`,
                text,
                theme,
                subject
            ));
        }
        
        return newCards;
    }

    extractMeaningBlocks(text) {
        const blocks = [];
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        const cleanText = text.replace(/\n\s*\n/g, '\n').trim();
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã
        const paragraphs = cleanText.split(/\n+/).filter(p => p.trim().length > 0);
        
        paragraphs.forEach(paragraph => {
            const trimmedPara = paragraph.trim();
            
            // –ï—Å–ª–∏ –∞–±–∑–∞—Ü –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            if (trimmedPara.length < 100 && this.looksLikeHeading(trimmedPara)) {
                blocks.push({
                    type: 'heading',
                    content: trimmedPara,
                    isImportant: true
                });
            } else {
                // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∞–±–∑–∞—Ü—ã –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–º—ã—Å–ª—É
                const sentences = trimmedPara.split(/[.!?]+/).filter(s => s.trim().length > 10);
                
                if (sentences.length <= 2) {
                    // –ö–æ—Ä–æ—Ç–∫–∏–π –∞–±–∑–∞—Ü - –æ–¥–∏–Ω –±–ª–æ–∫
                    blocks.push({
                        type: 'paragraph',
                        content: trimmedPara,
                        isImportant: this.isImportantContent(trimmedPara)
                    });
                } else {
                    // –î–ª–∏–Ω–Ω—ã–π –∞–±–∑–∞—Ü - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–º—ã—Å–ª–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã
                    const sentenceGroups = this.groupSentencesByMeaning(sentences);
                    sentenceGroups.forEach(group => {
                        blocks.push({
                            type: 'concept',
                            content: group.join(' '),
                            isImportant: group.some(s => this.isImportantContent(s))
                        });
                    });
                }
            }
        });
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –±–ª–æ–∫–∏
        return this.mergeShortBlocks(blocks);
    }

    looksLikeHeading(text) {
        const headingIndicators = [
            /^[–ê-–Ø][–∞-—è]+\s*:/, // –°–ª–æ–≤–æ —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º
            /^[IVXLCDM]+\./, // –†–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã
            /^\d+\./, // –ê—Ä–∞–±—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã
            /^[–∞-—è]\)/, // –ë—É–∫–≤–∞ —Å–æ —Å–∫–æ–±–∫–æ–π
            /^[‚Ä¢\-*]\s/, // –ú–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞
            /^[–ê-–Ø][^.!?]*$/, // –¢–µ–∫—Å—Ç –±–µ–∑ —Ç–æ—á–µ–∫ –≤ –∫–æ–Ω—Ü–µ
            /^(–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ|–ø–æ–Ω—è—Ç–∏–µ|—Ç–µ–æ—Ä–∏—è|–∑–∞–∫–æ–Ω|–ø—Ä–∏–Ω—Ü–∏–ø|–ø—Ä–∞–≤–∏–ª–æ|—Å–≤–æ–π—Å—Ç–≤–æ|–ø—Ä–∏–∑–Ω–∞–∫|—Ñ—É–Ω–∫—Ü–∏—è|—Ä–æ–ª—å|–∑–Ω–∞—á–µ–Ω–∏–µ|–≤–∏–¥—ã|—Ç–∏–ø—ã|–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è|–ø—Ä–∏–º–µ—Ä|–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏|—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)/i
        ];
        
        return headingIndicators.some(pattern => pattern.test(text));
    }

    isImportantContent(text) {
        const importantKeywords = [
            '–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', '–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è', '—è–≤–ª—è–µ—Ç—Å—è', '—Å–æ—Å—Ç–æ–∏—Ç', '–≤–∫–ª—é—á–∞–µ—Ç',
            '–≥–ª–∞–≤–Ω—ã–π', '–æ—Å–Ω–æ–≤–Ω–æ–π', '–≤–∞–∂–Ω—ã–π', '–∫–ª—é—á–µ–≤–æ–π', '—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π',
            '—Ñ—É–Ω–∫—Ü–∏—è', '—Ä–æ–ª—å', '–∑–Ω–∞—á–µ–Ω–∏–µ', '—Å–≤–æ–π—Å—Ç–≤–æ', '–ø—Ä–∏–∑–Ω–∞–∫',
            '–æ—Ç–ª–∏—á–∏–µ', '—Ä–∞–∑–ª–∏—á–∏–µ', '—Å—Ö–æ–¥—Å—Ç–≤–æ', '–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ', '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫',
            '–ø—Ä–∏—á–∏–Ω–∞', '—Å–ª–µ–¥—Å—Ç–≤–∏–µ', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–≤–ª–∏—è–Ω–∏–µ', '–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å'
        ];
        
        const lowerText = text.toLowerCase();
        return importantKeywords.some(keyword => lowerText.includes(keyword));
    }

    groupSentencesByMeaning(sentences) {
        const groups = [];
        let currentGroup = [];
        
        sentences.forEach((sentence, index) => {
            const cleanSentence = sentence.trim();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ–µ –ø–æ–Ω—è—Ç–∏–µ
            const startsNewConcept = this.startsNewConcept(cleanSentence);
            
            if (startsNewConcept && currentGroup.length > 0) {
                groups.push([...currentGroup]);
                currentGroup = [cleanSentence];
            } else {
                currentGroup.push(cleanSentence);
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
            if (index === sentences.length - 1 && currentGroup.length > 0) {
                groups.push([...currentGroup]);
            }
        });
        
        return groups;
    }

    startsNewConcept(sentence) {
        const conceptStarters = [
            /^–∫—Ä–æ–º–µ —Ç–æ–≥–æ/i,
            /^—Ç–∞–∫–∂–µ/i,
            /^–ø—Ä–∏ —ç—Ç–æ–º/i,
            /^—Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã/i,
            /^–æ–¥–Ω–∞–∫–æ/i,
            /^—Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º/i,
            /^–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ/i,
            /^–Ω–∞–ø—Ä–∏–º–µ—Ä/i,
            /^–≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏/i,
            /^–≤–æ-–ø–µ—Ä–≤—ã—Ö/i,
            /^–≤–æ-–≤—Ç–æ—Ä—ã—Ö/i,
            /^—Å–ª–µ–¥—É—é—â–∏–π/i,
            /^–¥—Ä—É–≥–æ–π/i,
            /^–æ—Ç–¥–µ–ª—å–Ω—ã–π/i,
            /^–æ—Å–æ–±—ã–π/i
        ];
        
        return conceptStarters.some(starter => starter.test(sentence));
    }

    mergeShortBlocks(blocks) {
        const merged = [];
        let currentBlock = null;
        
        blocks.forEach(block => {
            if (block.type === 'heading') {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –±–ª–æ–∫
                if (currentBlock) {
                    merged.push(currentBlock);
                }
                currentBlock = block;
            } else if (currentBlock && currentBlock.content.length < 150) {
                // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ç–µ–∫—É—â–∏–º –±–ª–æ–∫–æ–º, –µ—Å–ª–∏ –æ–Ω –∫–æ—Ä–æ—Ç–∫–∏–π
                currentBlock.content += ' ' + block.content;
                currentBlock.isImportant = currentBlock.isImportant || block.isImportant;
            } else {
                // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫
                if (currentBlock) {
                    merged.push(currentBlock);
                }
                currentBlock = block;
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
        if (currentBlock) {
            merged.push(currentBlock);
        }
        
        return merged.filter(block => block.content.length > 30); // –£–±–∏—Ä–∞–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –±–ª–æ–∫–∏
    }

    generateSmartQuestion(block, theme, index, totalBlocks) {
        const content = block.content.toLowerCase();
        
        // –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        if (block.type === 'heading') {
            return `–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç "${block.content}"?`;
        }
        
        // –í–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
        if (content.includes('–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ') || content.includes('–æ–∑–Ω–∞—á–∞–µ—Ç') || content.includes('—ç—Ç–æ')) {
            return '–ö–∞–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–µ—Ç—Å—è?';
        }
        
        if (content.includes('—Ñ—É–Ω–∫—Ü–∏—è') || content.includes('—Ä–æ–ª—å') || content.includes('–∑–Ω–∞—á–µ–Ω–∏–µ')) {
            return '–ö–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–ø–æ–ª–Ω—è–µ—Ç?';
        }
        
        if (content.includes('—Å–≤–æ–π—Å—Ç–≤–æ') || content.includes('—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞') || content.includes('–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å')) {
            return '–ö–∞–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–º–µ–µ—Ç?';
        }
        
        if (content.includes('–≤–∏–¥') || content.includes('—Ç–∏–ø') || content.includes('–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è')) {
            return '–ö–∞–∫–∏–µ –≤–∏–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç?';
        }
        
        if (content.includes('–ø—Ä–∏–º–µ—Ä') || content.includes('–Ω–∞–ø—Ä–∏–º–µ—Ä')) {
            return '–ü—Ä–∏–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä';
        }
        
        if (content.includes('–ø—Ä–∏—á–∏–Ω–∞') || content.includes('–≤–ª–∏—è–Ω–∏–µ') || content.includes('–∑–∞–≤–∏—Å–∏—Ç')) {
            return '–ö–∞–∫–∏–µ –ø—Ä–∏—á–∏–Ω—ã –∏ —Å–ª–µ–¥—Å—Ç–≤–∏—è?';
        }
        
        if (content.includes('–æ—Ç–ª–∏—á–∏–µ') || content.includes('—Ä–∞–∑–ª–∏—á–∏–µ') || content.includes('—Å—Ö–æ–¥—Å—Ç–≤–æ')) {
            return '–í —á—ë–º –æ—Ç–ª–∏—á–∏–µ?';
        }
        
        if (content.includes('—Å–æ—Å—Ç–æ–∏—Ç') || content.includes('–≤–∫–ª—é—á–∞–µ—Ç') || content.includes('—Å—Ç—Ä—É–∫—Ç—É—Ä–∞')) {
            return '–ò–∑ —á–µ–≥–æ —Å–æ—Å—Ç–æ–∏—Ç?';
        }
        
        if (content.includes('–ø—Ä–æ—Ü–µ—Å—Å') || content.includes('—ç—Ç–∞–ø') || content.includes('—Å—Ç–∞–¥–∏—è')) {
            return '–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å?';
        }
        
        // –£–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        if (block.isImportant && index === 0) {
            return '–í —á—ë–º —Å–æ—Å—Ç–æ–∏—Ç –æ—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è?';
        }
        
        if (block.isImportant) {
            const importantQuestions = [
                '–ß—Ç–æ –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å?',
                '–ö–∞–∫–æ–π –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç?',
                '–ö–∞–∫–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å?',
                '–ß—Ç–æ —Å–ª–µ–¥—É–µ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç—å?'
            ];
            return importantQuestions[index % importantQuestions.length];
        }
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        const standardQuestions = [
            '–ß—Ç–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ?',
            '–û —á—ë–º –∏–¥—ë—Ç —Ä–µ—á—å?',
            '–ö–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è?',
            '–ß—Ç–æ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è?',
            '–ö–∞–∫–æ–π –∞—Å–ø–µ–∫—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è?'
        ];
        
        return standardQuestions[index % standardQuestions.length];
    }

    findMainTopic(text) {
        const lines = text.split('\n').filter(line => line.trim().length > 0);
        
        if (lines.length > 0) {
            const firstLine = lines[0].trim();
            
            if (firstLine.length <= 100) {
                let cleanLine = firstLine
                    .replace(/(—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞|–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ|–ø–æ–Ω—è—Ç–∏–µ|—Ç–µ–æ—Ä–∏—è|–∑–∞–∫–æ–Ω|–ø—Ä–∏–Ω—Ü–∏–ø|–ø—Ä–∞–≤–∏–ª–æ|—Å—É—â–Ω–æ—Å—Ç—å|–æ—Å–Ω–æ–≤–∞|—Ä–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç–∏|–≤–∏–¥—ã|—Ç–∏–ø—ã|–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)\s+/gi, '')
                    .replace(/[.:\-‚Äì‚Äî]/g, '')
                    .trim();
                
                const wordCount = cleanLine.split(' ').length;
                if (wordCount >= 1 && wordCount <= 6 && cleanLine.length > 3) {
                    return cleanLine;
                }
            }
        }
        
        const sentences = text.split(/[.!?]+/).slice(0, 2);
        for (let sentence of sentences) {
            let cleanSentence = sentence
                .replace(/(—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞|–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ|–ø–æ–Ω—è—Ç–∏–µ|—Ç–µ–æ—Ä–∏—è|—Ä–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç–∏|–≤–∏–¥—ã|—Ç–∏–ø—ã)\s+/gi, '')
                .trim();
            
            const words = cleanSentence.split(' ').filter(word => word.length > 0);
            
            for (let i = 0; i < words.length; i++) {
                const word = words[i].replace(/[^a-—è—ë]/gi, '');
                if (word.length > 4 && words[i][0] === words[i][0].toUpperCase()) {
                    if (!this.isServiceWord(word.toLowerCase())) {
                        return word;
                    }
                }
            }
            
            const meaningfulWords = words.filter(word => {
                const clean = word.replace(/[^a-—è—ë]/gi, '');
                return clean.length > 4 && !this.isServiceWord(clean.toLowerCase());
            });
            
            if (meaningfulWords.length >= 2) {
                return meaningfulWords.slice(0, 2).join(' ');
            }
            
            if (meaningfulWords.length === 1) {
                return meaningfulWords[0];
            }
        }
        
        const firstSentenceWords = text.split(' ').slice(0, 2);
        if (firstSentenceWords.length >= 2) {
            return firstSentenceWords.join(' ');
        }
        
        return '–æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–Ω—è—Ç–∏–µ';
    }

    isServiceWord(word) {
        const serviceWords = [
            '—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞', '–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', '–ø–æ–Ω—è—Ç–∏–µ', '—Ç–µ–æ—Ä–∏—è', '–∑–∞–∫–æ–Ω',
            '–ø—Ä–∏–Ω—Ü–∏–ø', '–ø—Ä–∞–≤–∏–ª–æ', '—Ç–µ–æ—Ä–µ–º–∞', '–∞–∫—Å–∏–æ–º–∞', '–ª–µ–º–º–∞', 
            '—Å–≤–æ–π—Å—Ç–≤–æ', '–ø—Ä–∏–∑–Ω–∞–∫', '—è–≤–ª–µ–Ω–∏–µ', '–ø—Ä–æ—Ü–µ—Å—Å', '—è–≤–ª–µ–Ω–∏–µ',
            '—Å—É—â–Ω–æ—Å—Ç—å', '–æ—Å–Ω–æ–≤–∞', '—Å–º—ã—Å–ª', '–∑–Ω–∞—á–µ–Ω–∏–µ', '—Ä–æ–ª—å',
            '—Ä–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç–∏', '–≤–∏–¥—ã', '—Ç–∏–ø—ã', '–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è', '–ø—Ä–∏–º–µ—Ä',
            '–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', '—Å–≤–æ–π—Å—Ç–≤–∞', '—Ñ—É–Ω–∫—Ü–∏–∏'
        ];
        return serviceWords.includes(word);
    }

    displayGeneratedCards() {
        const cardsList = document.getElementById('cardsList');
        const cardsContainer = document.getElementById('cardsContainer');
        
        if (!cardsList || !cardsContainer) return;
        
        cardsList.innerHTML = '';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
        const currentSubject = document.getElementById('subjectInput').value.trim();
        const currentTheme = document.getElementById('themeInput').value.trim();
        
        const recentCards = this.cards.filter(card => 
            card.subject === currentSubject && card.theme === currentTheme
        );
        
        if (recentCards.length === 0) {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ç–µ–º–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∫–∞—Ä—Ç–æ—á–µ–∫
            const allRecentCards = this.cards.slice(-20);
            allRecentCards.forEach((card) => {
                const cardElement = this.createCardElement(card);
                cardsList.appendChild(cardElement);
            });
        } else {
            recentCards.forEach((card) => {
                const cardElement = this.createCardElement(card);
                cardsList.appendChild(cardElement);
            });
        }
        
        this.showInterface('cardsContainer');
    }

    createCardElement(card) {
        const cardElement = document.createElement('div');
        cardElement.className = 'card';
        cardElement.innerHTML = `
            ${card.subject ? `<div class="card-subject">${card.subject}</div>` : ''}
            ${card.theme ? `<div class="card-theme">${card.theme}</div>` : ''}
            <div class="card-question">${card.question}</div>
            <div class="card-answer">${card.answer}</div>
            <div class="card-actions">
                <button class="edit-btn" data-card-id="${card.id}">
                    ‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button class="delete-btn" data-card-id="${card.id}">
                    üóë –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        `;
        return cardElement;
    }

    showCatalog() {
        if (this.cards.length === 0) {
            this.showNotification('–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏.', 'error');
            this.showInterface('mainInterface');
            return;
        }
        
        const groupedBySubject = this.groupCardsBySubject();
        let catalogHTML = '';
        
        Object.entries(groupedBySubject).forEach(([subject, subjectData]) => {
            const themeCount = Object.keys(subjectData.themes).length;
            const totalCards = Object.values(subjectData.themes).reduce((sum, theme) => sum + theme.length, 0);
            
            catalogHTML += `
                <div class="subject-group">
                    <div class="subject-header" onclick="memoryApp.toggleSubject('${this.encodeId(subject)}')">
                        <div class="subject-title">${subject}</div>
                        <div class="subject-count">${totalCards} –∫–∞—Ä—Ç–æ—á–µ–∫</div>
                        <button class="delete-subject-btn" data-subject-name="${subject}">
                            üóë
                        </button>
                    </div>
                    <div class="subject-themes" id="subject-${this.encodeId(subject)}">
            `;
            
            Object.entries(subjectData.themes).forEach(([theme, themeCards]) => {
                catalogHTML += `
                    <div class="theme-group">
                        <div class="theme-header" onclick="memoryApp.toggleTheme('${this.encodeId(subject)}', '${this.encodeId(theme)}')">
                            <div class="theme-title">${theme}</div>
                            <div class="theme-count">${themeCards.length}</div>
                            <button class="delete-theme-btn" data-subject-name="${subject}" data-theme-name="${theme}">
                                üóë
                            </button>
                        </div>
                        <div class="theme-cards" id="theme-${this.encodeId(subject)}-${this.encodeId(theme)}">
                            ${themeCards.map(card => `
                                <div class="catalog-card">
                                    <div style="font-weight: bold; margin-bottom: 8px;">${card.question}</div>
                                    <div style="color: #666; font-size: 14px; margin-bottom: 10px;">${card.answer.substring(0, 100)}${card.answer.length > 100 ? '...' : ''}</div>
                                    <div class="card-actions">
                                        <button class="edit-btn" data-card-id="${card.id}">
                                            ‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                        </button>
                                        <button class="delete-btn" data-card-id="${card.id}">
                                            üóë –£–¥–∞–ª–∏—Ç—å
                                        </button>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                `;
            });
            
            catalogHTML += `
                    </div>
                </div>
            `;
        });
        
        document.getElementById('catalogList').innerHTML = catalogHTML;
        this.showInterface('catalogInterface');
    }

    groupCardsBySubject() {
        return this.cards.reduce((groups, card) => {
            const subject = card.subject || '–ë–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∞';
            const theme = card.theme || '–ë–µ–∑ —Ç–µ–º—ã';
            
            if (!groups[subject]) {
                groups[subject] = { themes: {} };
            }
            
            if (!groups[subject].themes[theme]) {
                groups[subject].themes[theme] = [];
            }
            
            groups[subject].themes[theme].push(card);
            return groups;
        }, {});
    }

    toggleSubject(subjectId) {
        const subjectElement = document.getElementById(`subject-${subjectId}`);
        if (subjectElement) {
            if (subjectElement.style.display === 'block') {
                subjectElement.style.display = 'none';
            } else {
                subjectElement.style.display = 'block';
            }
        }
    }

    toggleTheme(subjectId, themeId) {
        const themeElement = document.getElementById(`theme-${subjectId}-${themeId}`);
        if (themeElement) {
            if (themeElement.style.display === 'block') {
                themeElement.style.display = 'none';
            } else {
                themeElement.style.display = 'block';
            }
        }
    }

    encodeId(text) {
        return text.replace(/[^a-zA-Z0-9–∞-—è–ê-–Ø]/g, '-').toLowerCase();
    }

    showInterface(interfaceName) {
        document.getElementById('mainInterface').style.display = 'none';
        document.getElementById('cardsContainer').style.display = 'none';
        document.getElementById('reviewInterface').style.display = 'none';
        document.getElementById('catalogInterface').style.display = 'none';
        
        document.getElementById(interfaceName).style.display = 'block';
        this.updateBackButton(interfaceName);
        this.currentInterface = interfaceName;
    }

    updateBackButton(interfaceName) {
        const backBtn = document.querySelector('.back-btn');
        if (backBtn) {
            if (interfaceName === 'mainInterface') {
                backBtn.style.display = 'none';
            } else {
                backBtn.style.display = 'block';
            }
        }
    }

    showMainInterface() {
        this.showInterface('mainInterface');
    }

    startReview() {
        if (this.cards.length === 0) {
            this.showNotification('–ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏.', 'error');
            this.showInterface('mainInterface');
            return;
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ—Ä–µ–º –í–°–ï –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
        this.reviewCards = [...this.cards];
        
        if (this.reviewCards.length === 0) {
            this.showNotification('–ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è', 'error');
            return;
        }
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        this.reviewCards = this.shuffleArray(this.reviewCards);
        this.currentCardIndex = 0;
        this.showInterface('reviewInterface');
        this.showCard();
    }

    shuffleArray(array) {
        const newArray = [...array];
        for (let i = newArray.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
        }
        return newArray;
    }

    showCard() {
        if (this.reviewCards.length === 0) return;
        
        const card = this.reviewCards[this.currentCardIndex];
        document.getElementById('questionCard').textContent = card.question;
        document.getElementById('answerCard').textContent = '';
        document.getElementById('answerCard').style.display = 'none';
        
        document.getElementById('showAnswerBtn').style.display = 'block';
        document.getElementById('hardBtn').style.display = 'none';
        document.getElementById('goodBtn').style.display = 'none';
        document.getElementById('easyBtn').style.display = 'none';
        
        this.isAnswerShown = false;
        this.updateProgress();
    }

    showAnswer() {
        if (this.reviewCards.length === 0) return;
        
        const card = this.reviewCards[this.currentCardIndex];
        document.getElementById('answerCard').textContent = card.answer;
        document.getElementById('answerCard').style.display = 'block';
        
        document.getElementById('showAnswerBtn').style.display = 'none';
        document.getElementById('hardBtn').style.display = 'inline-block';
        document.getElementById('goodBtn').style.display = 'inline-block';
        document.getElementById('easyBtn').style.display = 'inline-block';
        
        this.isAnswerShown = true;
        card.lastReviewed = new Date().toISOString();
        this.saveCards();
    }

    rateCard(rating) {
        if (this.reviewCards.length === 0) return;
        
        this.reviewCards[this.currentCardIndex].confidence = rating;
        this.saveCards();
        
        this.currentCardIndex++;
        
        if (this.currentCardIndex < this.reviewCards.length) {
            this.showCard();
        } else {
            this.showNotification('–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ', 'success');
            setTimeout(() => {
                this.showInterface('mainInterface');
            }, 2000);
        }
    }

    updateProgress() {
        const progressFill = document.getElementById('progressFill');
        if (progressFill && this.reviewCards.length > 0) {
            const progress = (this.currentCardIndex / this.reviewCards.length) * 100;
            progressFill.style.width = progress + '%';
        }
    }

    // –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    showStatistics() {
        const stats = this.getStatistics();
        
        const statsText = `
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:

–í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${stats.totalCards}
–ü–æ–≤—Ç–æ—Ä–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${stats.reviewedToday}

–ü–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
üò£ –°–ª–æ–∂–Ω—ã–µ: ${stats.byConfidence.hard}
üòê –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ: ${stats.byConfidence.good}  
üòä –õ–µ–≥–∫–∏–µ: ${stats.byConfidence.easy}

–ü–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:
${Object.entries(stats.bySubject).map(([subject, count]) => `‚Ä¢ ${subject}: ${count} –∫–∞—Ä—Ç–æ—á–µ–∫`).join('\n')}
        `.trim();
        
        alert(statsText);
    }

    getStatistics() {
        const today = new Date().toDateString();
        const reviewedToday = this.cards.filter(card => 
            card.lastReviewed && new Date(card.lastReviewed).toDateString() === today
        ).length;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
        const bySubject = this.cards.reduce((acc, card) => {
            const subject = card.subject || '–ë–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∞';
            acc[subject] = (acc[subject] || 0) + 1;
            return acc;
        }, {});
        
        return {
            totalCards: this.cards.length,
            reviewedToday,
            byConfidence: {
                hard: this.cards.filter(c => c.confidence === 2).length,
                good: this.cards.filter(c => c.confidence === 3).length,
                easy: this.cards.filter(c => c.confidence === 4).length
            },
            bySubject
        };
    }

    // –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
    showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => notification.style.transform = 'translateX(0)', 100);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            notification.style.transform = 'translateX(400px)';
            setTimeout(() => notification.remove(), 300);
        }, 4000);
    }

    // –ú–ï–¢–û–î–´ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ò –£–î–ê–õ–ï–ù–ò–Ø –ö–ê–†–¢–û–ß–ï–ö
    showEditModal(cardId) {
        const card = this.cards.find(c => c.id == cardId);
        if (!card) {
            this.showNotification('–û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
            return;
        }
        
        this.editingCardId = cardId;
        
        document.getElementById('editSubject').value = card.subject || '';
        document.getElementById('editTheme').value = card.theme || '';
        document.getElementById('editQuestion').value = card.question || '';
        document.getElementById('editAnswer').value = card.answer || '';
        
        document.getElementById('editModal').style.display = 'flex';
    }

    hideEditModal() {
        document.getElementById('editModal').style.display = 'none';
        this.editingCardId = null;
    }

    saveEditedCard() {
        if (!this.editingCardId) return;
        
        const card = this.cards.find(c => c.id == this.editingCardId);
        if (!card) {
            this.showNotification('–û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
            return;
        }
        
        const newSubject = document.getElementById('editSubject').value.trim();
        const newTheme = document.getElementById('editTheme').value.trim();
        const newQuestion = document.getElementById('editQuestion').value.trim();
        const newAnswer = document.getElementById('editAnswer').value.trim();
        
        if (!newQuestion || !newAnswer || !newSubject) {
            this.showNotification('–ü—Ä–µ–¥–º–µ—Ç, –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!', 'error');
            return;
        }
        
        card.subject = newSubject;
        card.theme = newTheme;
        card.question = newQuestion;
        card.answer = newAnswer;
        
        this.saveCards();
        this.hideEditModal();
        
        if (this.currentInterface === 'catalogInterface') {
            this.showCatalog();
        } else if (this.currentInterface === 'cardsContainer') {
            this.displayGeneratedCards();
        }
        
        this.showNotification('–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! ‚úÖ', 'success');
    }

    showDeleteModal(cardId) {
        this.deletingCardId = cardId;
        document.getElementById('deleteModal').style.display = 'flex';
    }

    hideDeleteModal() {
        document.getElementById('deleteModal').style.display = 'none';
        this.deletingCardId = null;
    }

    confirmDeleteCard() {
        if (!this.deletingCardId) return;
        
        const initialLength = this.cards.length;
        this.cards = this.cards.filter(c => c.id != this.deletingCardId);
        
        if (this.cards.length === initialLength) {
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏', 'error');
            return;
        }
        
        this.saveCards();
        this.hideDeleteModal();
        
        if (this.currentInterface === 'catalogInterface') {
            this.showCatalog();
        } else if (this.currentInterface === 'cardsContainer') {
            this.displayGeneratedCards();
        }
        
        this.showNotification('–ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞! ‚úÖ', 'success');
    }

    // –ú–ï–¢–û–î–´ –£–î–ê–õ–ï–ù–ò–Ø –¢–ï–ú –ò –ü–†–ï–î–ú–ï–¢–û–í
    showDeleteThemeModal(themeName, subjectName) {
        this.deletingThemeName = themeName;
        this.deletingSubjectName = subjectName;
        
        const themeCards = this.cards.filter(card => 
            card.subject === subjectName && card.theme === themeName
        );
        
        document.getElementById('deleteThemeText').textContent = 
            `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É "${themeName}" –∏ –≤—Å–µ ${themeCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –Ω–µ–π? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`;
        
        document.getElementById('deleteThemeModal').style.display = 'flex';
    }

    hideDeleteThemeModal() {
        document.getElementById('deleteThemeModal').style.display = 'none';
        this.deletingThemeName = null;
        this.deletingSubjectName = null;
    }

    confirmDeleteTheme() {
        if (!this.deletingThemeName || !this.deletingSubjectName) return;
        
        const initialLength = this.cards.length;
        this.cards = this.cards.filter(card => 
            !(card.subject === this.deletingSubjectName && card.theme === this.deletingThemeName)
        );
        
        const deletedCount = initialLength - this.cards.length;
        this.saveCards();
        this.hideDeleteThemeModal();
        this.showCatalog();
        
        this.showNotification(`–¢–µ–º–∞ "${this.deletingThemeName}" –∏ ${deletedCount} –∫–∞—Ä—Ç–æ—á–µ–∫ —É–¥–∞–ª–µ–Ω—ã! ‚úÖ`, 'success');
    }

    showDeleteSubjectModal(subjectName) {
        this.deletingSubjectName = subjectName;
        
        const subjectCards = this.cards.filter(card => card.subject === subjectName);
        const themeCount = new Set(subjectCards.map(card => card.theme)).size;
        
        document.getElementById('deleteSubjectText').textContent = 
            `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç "${subjectName}" (${themeCount} —Ç–µ–º, ${subjectCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫)? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`;
        
        document.getElementById('deleteSubjectModal').style.display = 'flex';
    }

    hideDeleteSubjectModal() {
        document.getElementById('deleteSubjectModal').style.display = 'none';
        this.deletingSubjectName = null;
    }

    confirmDeleteSubject() {
        if (!this.deletingSubjectName) return;
        
        const initialLength = this.cards.length;
        this.cards = this.cards.filter(card => card.subject !== this.deletingSubjectName);
        
        const deletedCount = initialLength - this.cards.length;
        this.saveCards();
        this.hideDeleteSubjectModal();
        this.showCatalog();
        
        this.showNotification(`–ü—Ä–µ–¥–º–µ—Ç "${this.deletingSubjectName}" –∏ ${deletedCount} –∫–∞—Ä—Ç–æ—á–µ–∫ —É–¥–∞–ª–µ–Ω—ã! ‚úÖ`, 'success');
    }

    shareApp() {
        const shareText = 'MemBrain - –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –æ–±—É—á–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–º–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏!';
        
        if (navigator.share) {
            navigator.share({
                title: 'MemBrain',
                text: shareText,
                url: window.location.href,
            });
        } else {
            navigator.clipboard.writeText(window.location.href).then(() => {
                this.showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º –∏ –∫–æ–ª–ª–µ–≥–∞–º! üéâ', 'success');
            });
        }
    }

    saveCards() {
        try {
            localStorage.setItem('memoryCards', JSON.stringify(this.cards));
            console.log('Cards saved successfully, total:', this.cards.length);
        } catch (e) {
            console.error('Error saving cards:', e);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', 'error');
        }
    }

    loadCards() {
        try {
            const saved = localStorage.getItem('memoryCards');
            if (!saved) return [];
            
            const cardsData = JSON.parse(saved);
            const cards = cardsData.map(cardData => {
                const card = new MemoryCard(
                    cardData.question || '',
                    cardData.answer || '',
                    cardData.theme || '',
                    cardData.subject || ''
                );
                card.id = cardData.id || card.id;
                card.lastReviewed = cardData.lastReviewed || null;
                card.confidence = cardData.confidence || 3;
                card.createdAt = cardData.createdAt || new Date().toISOString();
                return card;
            });
            
            console.log('Cards loaded:', cards.length);
            return cards;
        } catch (e) {
            console.error('Error loading cards:', e);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
            return [];
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
let memoryApp;

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    memoryApp = new MemoryApp();
    memoryApp.init();
    console.log('MemBrain app initialized');
});
