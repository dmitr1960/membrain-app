// ==================== MEMBRAIN - AI –¢–†–ï–ù–ï–† –ü–ê–ú–Ø–¢–ò ====================

class SmartFlashcard {
    constructor(question, answer) {
        this.id = Date.now() + Math.random();
        this.question = question;
        this.answer = answer;
        this.interval = 1;
        this.repetition = 0;
        this.easeFactor = 2.5;
        this.nextReview = new Date();
        this.lastScore = null;
        this.createdDate = new Date();
    }
    
    updateInterval(quality) {
        if (quality < 3) {
            this.interval = 1;
            this.repetition = 0;
        } else {
            if (this.repetition === 0) this.interval = 1;
            else if (this.repetition === 1) this.interval = 3;
            else this.interval = Math.round(this.interval * this.easeFactor);
            
            this.repetition++;
        }
        
        this.easeFactor += 0.1 - (5 - quality) * (0.08 + (5 - quality) * 0.02);
        this.easeFactor = Math.max(1.3, Math.min(this.easeFactor, 5.0));
        
        const nextDate = new Date();
        nextDate.setDate(nextDate.getDate() + this.interval);
        this.nextReview = nextDate;
        this.lastScore = quality;
    }
    
    needsReview() {
        return new Date() >= this.nextReview;
    }
}

// –£–ú–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–ê–†–¢–û–ß–ï–ö
function generateFlashcards(text) {
    if (!text || text.trim().length < 10) {
        return [new SmartFlashcard(
            "–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è", 
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π –æ—Ç 10 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫"
        )];
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –º—É—Å–æ—Ä–∞
    const cleanedText = text
        .replace(/\d+\.\s*/g, '') // –£–¥–∞–ª—è–µ–º "1. ", "2. "
        .replace(/–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞/g, '') // –£–¥–∞–ª—è–µ–º –º—É—Å–æ—Ä
        .replace(/\n/g, '. ') // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã
        .replace(/\s+/g, ' ') // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        .trim();
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const sentences = cleanedText.split(/[.!?]+/).filter(s => {
        const trimmed = s.trim();
        return trimmed.length > 20 && trimmed.split(' ').length >= 4;
    });
    
    const flashcards = [];
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
    sentences.forEach((sentence) => {
        const trimmed = sentence.trim();
        if (!trimmed) return;
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        const cleanSentence = trimmed.replace(/^\d+\s*/, '').trim();
        if (cleanSentence.length < 15) return;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        const words = cleanSentence.split(' ').filter(word => 
            word.length > 3 && 
            !['—ç—Ç–æ', '—Ç–∞–∫–∂–µ', '–∫–æ—Ç–æ—Ä—ã–µ', '–∫–æ—Ç–æ—Ä—ã–π', '–Ω–∞–ø—Ä–∏–º–µ—Ä', '–ø—Ä–æ—Ü–µ—Å—Å'].includes(word.toLowerCase())
        );
        
        let mainConcept;
        if (words.length >= 2) {
            mainConcept = words.slice(0, 2).join(' ');
        } else {
            // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            const allWords = cleanSentence.split(' ').filter(word => word.length > 2);
            mainConcept = allWords.slice(1, 3).join(' ') || allWords.slice(0, 2).join(' ');
        }
        
        if (!mainConcept || mainConcept.split(' ').length < 2) return;
        
        // –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        let question;
        const lowerSentence = cleanSentence.toLowerCase();
        
        if (lowerSentence.includes('—ç—Ç–æ') || lowerSentence.includes('–æ–∑–Ω–∞—á–∞–µ—Ç')) {
            question = `–î–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: ${mainConcept}`;
        } else if (lowerSentence.includes('–Ω–∞–ø—Ä–∏–º–µ—Ä') || lowerSentence.includes('–ø—Ä–∏–º–µ—Ä')) {
            question = `–ü—Ä–∏–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä: ${mainConcept}`;
        } else if (lowerSentence.includes('—Ñ—É–Ω–∫—Ü–∏—è') || lowerSentence.includes('–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ')) {
            question = `–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É ${mainConcept}?`;
        } else {
            question = `–û–±—ä—è—Å–Ω–∏—Ç–µ: ${mainConcept}`;
        }
        
        const answer = cleanSentence;
        
        flashcards.push(new SmartFlashcard(question, answer));
    });
    
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ö–æ—Ç—è –±—ã 2 –∫–∞—Ä—Ç–æ—á–∫–∏
    if (flashcards.length < 2) {
        const firstWords = cleanedText.split(' ').filter(word => word.length > 3).slice(0, 2).join(' ');
        flashcards.push(
            new SmartFlashcard(
                `–û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞: ${firstWords || '—Ç–µ–∫—Å—Ç–∞'}`,
                cleanedText.substring(0, 120) + (cleanedText.length > 120 ? '...' : '')
            )
        );
    }
    
    return flashcards.slice(0, 8);
}

// ==================== –°–ò–°–¢–ï–ú–ê –ò–ù–¢–ï–†–§–ï–ô–°–ê ====================

let currentCards = [];
let reviewCards = [];
let currentReviewIndex = 0;

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
document.getElementById('generateBtn').addEventListener('click', function() {
    const text = document.getElementById('textInput').value.trim();
    
    if (text.length < 10) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)');
        return;
    }
    
    currentCards = generateFlashcards(text);
    displayCards(currentCards);
});

// –ü–æ–∫–∞–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
function displayCards(cards) {
    const cardsList = document.getElementById('cardsList');
    const cardsContainer = document.getElementById('cardsContainer');
    const mainInterface = document.getElementById('mainInterface');
    
    cardsList.innerHTML = '';
    
    cards.forEach((card, index) => {
        const cardElement = document.createElement('div');
        cardElement.className = 'card';
        cardElement.innerHTML = `
            <div class="card-question">${index + 1}. ${card.question}</div>
            <div class="card-answer">${card.answer}</div>
        `;
        cardsList.appendChild(cardElement);
    });
    
    mainInterface.style.display = 'none';
    cardsContainer.style.display = 'block';
}

// –ù–∞—á–∞–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
document.getElementById('startReviewBtn').addEventListener('click', function() {
    startReviewSession();
});

function startReviewSession() {
    reviewCards = [...currentCards];
    currentReviewIndex = 0;
    
    document.getElementById('cardsContainer').style.display = 'none';
    document.getElementById('reviewInterface').style.display = 'block';
    
    showNextCard();
}

// –ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
function showNextCard() {
    if (currentReviewIndex >= reviewCards.length) {
        endReviewSession();
        return;
    }
    
    const card = reviewCards[currentReviewIndex];
    const progress = ((currentReviewIndex) / reviewCards.length) * 100;
    
    document.getElementById('questionCard').textContent = card.question;
    document.getElementById('answerCard').style.display = 'none';
    document.getElementById('answerCard').textContent = card.answer;
    
    document.getElementById('progressFill').style.width = progress + '%';
    document.getElementById('showAnswerBtn').style.display = 'block';
    document.getElementById('hardBtn').style.display = 'none';
    document.getElementById('goodBtn').style.display = 'none';
    document.getElementById('easyBtn').style.display = 'none';
}

// –ü–æ–∫–∞–∑ –æ—Ç–≤–µ—Ç–∞
document.getElementById('showAnswerBtn').addEventListener('click', function() {
    document.getElementById('answerCard').style.display = 'block';
    document.getElementById('showAnswerBtn').style.display = 'none';
    document.getElementById('hardBtn').style.display = 'inline-block';
    document.getElementById('goodBtn').style.display = 'inline-block';
    document.getElementById('easyBtn').style.display = 'inline-block';
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—Ü–µ–Ω–∫–∏
function setupRatingButtons() {
    document.getElementById('hardBtn').addEventListener('click', function() {
        rateCard(2);
    });
    
    document.getElementById('goodBtn').addEventListener('click', function() {
        rateCard(3);
    });
    
    document.getElementById('easyBtn').addEventListener('click', function() {
        rateCard(4);
    });
}

// –û—Ü–µ–Ω–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
function rateCard(rating) {
    const card = reviewCards[currentReviewIndex];
    card.updateInterval(rating);
    
    saveProgress();
    
    currentReviewIndex++;
    showNextCard();
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
function endReviewSession() {
    alert('–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! üéâ\n\n–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–µ–Ω—å\n\n–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω.');
    
    document.getElementById('reviewInterface').style.display = 'none';
    document.getElementById('mainInterface').style.display = 'block';
    document.getElementById('textInput').value = '';
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function saveProgress() {
    const progress = {
        cards: currentCards.map(card => ({
            id: card.id,
            interval: card.interval,
            repetition: card.repetition,
            easeFactor: card.easeFactor,
            nextReview: card.nextReview
        })),
        lastReview: new Date()
    };
    
    localStorage.setItem('membrainProgress', JSON.stringify(progress));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function loadProgress() {
    const saved = localStorage.getItem('membrainProgress');
    if (saved) {
        try {
            const progress = JSON.parse(saved);
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å:', progress);
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', e);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('MemBrain –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    setupRatingButtons();
    loadProgress();
});
